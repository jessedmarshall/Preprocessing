
// public static void main(String args[]) {
//     if (args.length<1)
//         IJ.log("usage: process image");
//     else {
//     	IJ.log("starting plugin via main");
//         // new ImageJ(); // open the ImageJ window to see images and results
//         String dir = "E:/biafra/data/miniscope/check/hd_a/2013_09_12_m475/concat";
//         new GCaMP_Register_Multiple_Days_Same_Target_4().run(dir);
//         // new GCaMP_Register_Multiple_Days_Same_Target_4().run(args[0]);
//         System.exit(0);
//     }
// }


String[] ml = {"Make", "Load"};
// NonBlockingGenericDialog targetSource = new NonBlockingGenericDialog("Make target?");
// targetSource.addMessage("Make the target file or load it from a saved file?");
// targetSource.addChoice("Choice: ", ml, "Make");
// targetSource.showDialog();
// if (targetSource.wasCanceled()) return;
// String tSource = targetSource.getNextChoice();
String tSource = "Make";
//--------------------------------------------------------
if (tSource == "Load") {
	//--------------------------------------------------------
	DirectoryChooser dct = new DirectoryChooser("Select the directory where the target lives:");
	if (dct.getDirectory()==null) return;
	tLoadDir = dct.getDirectory();

	ImagePlus t = new Opener().openImage(tLoadDir + "target.tif");
	if (t==null) {
		IJ.error("Error opening image.");
		return;
	}

	String targTitle = t.getShortTitle();
	roi = new Roi(t.getProcessor().getRoi());

	t.show();

	//Create a dialog that asks whether the registration should be based on dark features (e.g. blood vessels) or light features (e.g. visible/filled cells)
	String[] choices = {"Darks", "Lights"};
	NonBlockingGenericDialog dksOrLts = new NonBlockingGenericDialog("Inverted?");
	dksOrLts.addMessage("Is this image contrast inverted?");
	dksOrLts.addChoice("Choice: ", yn, "Yes");
	dksOrLts.showDialog();
	if (dksOrLts.wasCanceled()) return;
	String res = dksOrLts.getNextChoice();
	if (res == "Yes"){dkslts = "Darks";}
	else if (res == "No"){dkslts = "Lights";}

	t.hide();

	width=t.getWidth();
	height=t.getHeight();

	ImagePlus tFinal = new ImagePlus("Target", t.getProcessor().crop());

	targetpath = temp+ targTitle + "-target.tif";

	new FileSaver(tFinal).saveAsTiff((String) targetpath);
	t.close();
	t.flush();
}
else if (tSource == "Make") {

	// CREATE THE REGISTRATION TARGET FILE

	OpenDialog od = new OpenDialog("Choose the file you want to use to make the target","");
	String tdir = od.getDirectory();
	String tname = od.getFileName();

	//Open the 100th slice of the selected file
	ImagePlus targFull = new Opener().openImage(tdir + tname, 100);
	if (targFull==null) {
		IJ.error("Error opening image.");
		return;
	}

	String targTitle = targFull.getShortTitle();
	targFull.show();

	//Get dimensions
	width=(int) Math.round(targFull.getWidth()/1);
	height=(int) Math.round(targFull.getHeight()/1);
	int slicesTarget = targFull.getNSlices();

	//Use the following bits of code if you are opening multiple slices in the target and averaging them
	//NonBlockingGenericDialog targmkr = new NonBlockingGenericDialog("Which slices?");
	//targmkr.addMessage("Please choose which slices should be averaged\nto make the target file. Enter e.g. 1, 1,2,3 or 1-3.");
	//targmkr.addStringField("Slices: ", null);
	//targmkr.showDialog();
	//if (targmkr.wasCanceled()) return;
	//String s = targmkr.getNextString();

	//Take the substack
	//ImagePlus targSub = new SubstackMaker().makeSubstack(targFull, s);
	//targFull.close();
	//targFull.flush();

	//Average the substack
	//ZProjector zpTarg = new ZProjector(targSub);
	//zpTarg.setMethod(zpTarg.AVG_METHOD);
	//zpTarg.doProjection();
	//ImagePlus targAvg = zpTarg.getProjection();
	//targSub.close();
	//targSub.flush();

	//Downsample by 4 in height and width dimensions
	IJ.run(targFull, "Scale...", "x=1.00 y=1.00 z=1.0 width=" + String.valueOf(width) + " height=" + String.valueOf(height) + " depth=" + String.valueOf(slicesTarget)+" interpolation=Bilinear average process create title=Target");
	targFull.close();
	targFull.flush();
	ImagePlus targ = WindowManager.getImage("Target");

	targ.show();

	//Create a dialog that asks whether the registration should be based on dark features (e.g. blood vessels) or light features (e.g. visible/filled cells)
	String[] choices = {"Darks", "Lights"};
	NonBlockingGenericDialog dksOrLts = new NonBlockingGenericDialog("Darks or lights?");
	dksOrLts.addMessage("Please indicate whether the registration should be based on\ndark (e.g. blood vessels) or light features (e.g. visible/filled cells)?");
	dksOrLts.addChoice("Choice: ", choices, "Darks");
	dksOrLts.showDialog();
	if (dksOrLts.wasCanceled()) return;
	String res = dksOrLts.getNextChoice();
	dkslts=res;

	//Close this image window
	targ.hide();

	//Duplicate the image
	ImagePlus targDup = new Duplicator().run(targ);

	//Mean filter, radius 20
	new RankFilters().rank(targ.getProcessor(),(double) 20,RankFilters.MEAN);

	//Perform the image subtraction
	ImagePlus targFilt;
	if (res=="Darks"){
	targFilt = new ImageCalculator().run("Subtract create 32-bit stack",targ,targDup);
	}
	else if (res=="Lights"){
	targFilt = new ImageCalculator().run("Subtract create 32-bit stack",targDup,targ);
	}
	else{return;}
	targ.close();
	targ.flush();
	targDup.close();
	targDup.flush();

	//Perform Gaussian blur, radius 2
	new GaussianBlur().blurGaussian(targFilt.getProcessor(),(double) 2, (double) 2, (double) 0.02);

	//Adjust Brightness/Contrast
	targFilt.getProcessor().setMinAndMax((double) -30, (double) 30);

	//Change to 8-bit image
	new ImageConverter(targFilt).convertToGray8();

	//Get user roi
	targFilt.show();
	WaitForUserDialog wfu = new WaitForUserDialog("Please select a region of the image to be used for registration.");
	wfu.show();
	roi = new Roi(targFilt.getProcessor().getRoi());
	if (roi==null) return;

	DirectoryChooser dct = new DirectoryChooser("Where do you want to save the target?");
	String tSaveDir = dct.getDirectory();
	new FileSaver(targFilt).saveAsTiff((String) tSaveDir + "target.tif");

	targFilt.hide();
	ImagePlus targFinal = new ImagePlus("Target", targFilt.getProcessor().crop());
	targFinal.show();

	targetpath=temp+ targTitle + "-target.tif";

	new FileSaver(targFinal).saveAsTiff((String) targetpath);

	//Clear all the stuff used in creating the target
	targFilt.close();
	targFilt.flush();

	targFinal.close();
	targFinal.flush();

}
else {return;}